openapi: 3.0.3
info:
  title: CIBER MED - OpenAPI 1.0
  description: Esta es la documentacion para la api de ciber med en donde se especifican los campos para el crud y el uso de los endpoints
  contact:
    email: isaacfernando5351@gmail.com
  version: 1.0.0
servers:
  - url: https://ciber-med-api.herokuapp.com
  - url: http://localhost:4000
tags:
  - name: user
    description: registro e inicio de sesion de usuarios
  - name: products
    description: crud para productos
  - name: tag
    description: este campo muestra el tipo uso
paths:
  /register:
    post:
      tags:
        - user
      summary: create a new user usuario
      requestBody:
        description: los campos a recibir son
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/register"
          application/xml:
            schema:
              $ref: "#/components/schemas/register"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/register"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/status"
            application/xml:
              schema:
                $ref: "#/components/schemas/status"
        "400":
          description: Invalid ID supplied
        "404":
          description: not found
        "405":
          description: Validation exception

  /login:
    post:
      tags:
        - user
      summary: register a user
      requestBody:
        description: recibe los campos que va a llenar
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets

  /user/app/{id}:
    put:
      tags:
        - user
      summary: Update user
      description: con este endpoint se puede actualizar la informacion del usuario
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/register"
          application/xml:
            schema:
              $ref: "#/components/schemas/register"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/register"
      responses:
        200:
          description: successful operation

    delete:
      tags:
        - user
      summary: Delete user
      description: this can delete a user
      parameters:
        - name: id
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: number
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/delete"
        "400":
          description: Invalid id supplied
        "404":
          description: User not found

  /tags:
    post:
      tags:
        - tag
      summary: peticion get
      requestBody:
        description: hola
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/hola"
      responses:
        "200":
          description: operacion exitosa
        "400":
          description: fallo el proceso

  /products:
    post:
      tags:
        - products
      summary: create a new product
      requestBody:
        description: campos requeridos para el uso del crud de productos
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/products"
      responses:
        '200':
          description: operacion exitosa
        '400':
          description: operacion fallida
    get:
      tags:
        - products
      summary: read a products
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status'
        '400':
          description: error

components:
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          example: patrick.jane@gmail.com
        contrasenia:
          type: string
          example: UserPatrick
      xml:
        name: user

    register:
      type: object
      properties:
        nombres:
          type: string
          example: Patrick
        apellidos:
          type: string
          example: Jane
        email:
          type: string
          example: patrick.jane@gmail.com
        contrasenia:
          type: string
          example: UserPatrick
      xml:
        name: register

    products:
      type: object
      properties:
        nombres:
          type: string
          example: Intestonomicina
        precios:
          type: string
          example: $0.15
        descripcion:
          type: string
          example: medicamento para dolores estomacales
        marca:
          type: string
          example: Laboratorios Lopez
        id_tipo_consumo:
          type: number
          example: 1
        id_tipo_uso:
          type: number
          example: 1
        cantidad_medicamento:
          type: number
          example: 200
        cant_gramos:
          type: string
          example: 500mg
      xml:
        name: products

    status:
      type: object
      properties:
        fieldCount:
          type: number
          example: 0
        affectedRows:
          type: number
          example: 1
        insertId:
          type: number
          example: 15
        info:
          type: string
          example: ""
        serverStatus:
          type: number
          example: 2
        warningStatus:
          type: number
          example: 0

    delete:
      type: object
      properties:
        fieldCount:
          type: number
          example: 0
        affectedRows:
          type: number
          example: 1
        insertId:
          type: number
          example: 0
        info:
          type: string
          example: ""
        serverStatus:
          type: number
          example: 2
        warningStatus:
          type: number
          example: 0
      xml:
        name: delete

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"

  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
