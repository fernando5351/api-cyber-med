openapi: 3.0.3
info:
  title: CIBER MED - OpenAPI 1.0
  description: Esta es la documentacion para la api de ciber med en donde se especifican los campos para el crud y el uso de los endpoints
  contact:
    email: isaacfernando5351@gmail.com
  version: 1.0.0
servers:
  - url: https://ciber-med-api.herokuapp.com
  - url: http://localhost:4000
tags:
  - name: user
    description: registro e inicio de sesion de usuarios
  - name: products
    description: crud para productos
  - name: tag
    description: aca se muestran los tipos consumo
paths:
  /register:
    post:
      tags:
        - user
      summary: create a new user usuario
      requestBody:
        description: los campos a recibir son
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/register'
          application/xml:
            schema:
              $ref: '#/components/schemas/register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/register'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status'          
            application/xml:
              schema:
                $ref: '#/components/schemas/status'
        '400':
          description: Invalid ID supplied
        '404':
          description: not found
        '405':
          description: Validation exception
      
  /login:
    post:
      tags:
        - user
      summary: register a user
      requestBody:
        description: recibe los campos que va a llenar
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
        - pet
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
        
    hola:
      type: object
      properties:
        nombres:
          type: string
          example: hola mundo

    register:
      type: object
      properties:
        nombres: 
          type: string
          example: Patrick
        apellidos:
          type: string
          example: Jane
        email:
          type: string
          example: patrick.jane@gmail.com
        contrasenia:
          type: string
          example: UserPatrick
      xml:
        name: register
    
    status:
      type: object
      properties:
        fieldCount: 
          type: number
          example: 0
        affectedRows:
          type: number
          example: 1
        insertId:
          type: number
          example: 15
        info:
          type: string
          example: ''
        serverStatus:
          type: number
          example: 2
        warningStatus:
          type: number
          example: 0
        
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
        
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header